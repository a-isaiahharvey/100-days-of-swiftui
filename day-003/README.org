#+title: Day 3
#+author: Allister Isaiah Harvey
#+date: 04-11-2023
#+property: header-args :tangle Day3.swift
#+babel: :session *swift* :cache yes :tangle yes
#+startup: showeverything
#+options: toc:3

* Table of Contents :toc:
- [[#how-to-store-ordered-data-in-arrays][How to store ordered data in arrays]]
  - [[#why-does-swift-have-arrays][Why does Swift have arrays?]]
- [[#how-to-store-and-find-data-in-dictionaries][How to store and find data in dictionaries]]
  - [[#why-does-swift-have-dictionaries-as-well-as-arrays][Why does Swift have dictionaries as well as arrays?]]
  - [[#why-does-swift-have-default-values-for-dictionaries][Why does Swift have default values for dictionaries?]]
- [[#how-to-use-sets-for-fast-data-lookup][How to use sets for fast data lookup]]
  - [[#why-are-sets-different-from-arrays-in-swift][Why are sets different from arrays in Swift?]]
- [[#how-to-create-and-use-enums][How to create and use enums]]

* How to store ordered data in arrays

- It's common to want to have lots of data in a single place: The groupping.
- Array can holds data as many as you want in the order you add it.

#+begin_src swift
let beatles = ["John", "Paul", "George", "Ringo"]  // String array
let numbers = [4, 8, 15, 16, 23, 42]  // Int array
let temperatures = [25.3, 28.2, 26.4]  // Double array
#+end_src

- To read value from an array, we ask for values by the position they appear in the array.
- The position of an item in an array is called index.
- Make sure an item exists at the index, otherwise your code will crash.

#+begin_src swift
print(beatles[0])  // "John"
print(numbers[1])  // 8
print(temperatures[2])  // 26.4
#+end_src

- When the array is variable, you can modify it.
- You can add new items using ~append()~.

#+begin_src swift :tangle no
beatles.append("Adrian")  // o
temperatures.append("Chris")  // x. You can not add String value to Double array
#+end_src

- Making array

#+begin_src swift
let emptyArray1 = Array<String>()
let emptyArray2 = [String]()
let stringArray = ["Folklore"]
#+end_src

- Use ~.count~ to read how many items are in an array.
- Use ~remove(at:)~ to remove one item at a specific index.
- Use ~removeAll()~ to remove all items in an array.
- Use ~contains()~ to check whether an array contains a specific item.
- Use ~sorted()~ to sort an array.
- Use ~reversed()~ to reverse order in an array.

#+begin_src swift :tangle no
let beatles = ["John", "Paul", "George", "Ringo"]

beatles.count  // 4
beatles.remove(at: 1)  // ["John", "George", "Ringo"]
beatles.removeAll()  // []
beatles.contains("Paul")  // true
beatles.sorted()  // ["George", "John", "Paul", "Ringo"]
beatles.reversed()  // ["Ringo", "George", "Paul", "John"]
#+end_src

** Why does Swift have arrays?
- To store many values
- The index starts from zero

* How to store and find data in dictionaries

- Accessing data by its index in the array can be annoyinig or even dangerous.
- Dictionaries let us decide **where items should be stored.**
- Dictionaries store data for key.

#+begin_src swift
let employee = [
    "name": "Taylor Swift",
    "job": "Singer",
    "location": "Nashville"
]
#+end_src

- To read data in the dictionary, you use the same keys when creating it.
- The output is optional by default.
- When reading from a dictionary, you can provide a default value to use if the key doesn't exist.

#+begin_src swift
employee["name"]  // Optional("Taylor Swift")
employee["age"]  // nil
employee["age", default: "0"]  // 0
employee["name", default: "Unknown"]  // "Taylor Swift"
#+end_src

- You can create an empty dictionary using whatever explict types you want to store.

#+begin_src swift
var heights = [String: Int]()
heights["Yao Ming"] = 229
heights["Shaquille O'Neal"] = 216
#+end_src

** Why does Swift have dictionaries as well as arrays?

- Dictionaries and arrays are both ways of storing lots of data in one variable.
  - Dictionaries use ~key~ that identifies the item.
  - Arrays just add each item *sequentially*.
- Dictionaries optimize the way they store items for fast retrival.
  - Dictionary : ~O(1)~ time complexity
  - Array : ~O(n)~ time complexity

** Why does Swift have default values for dictionaries?

- Whenever you read a value from a dictionary, you might get a value or ~nil~.
- There might be no value for that key in a dictionary.


* How to use sets for fast data lookup

- Sets are simillor to arrays
- Sets can't add duplicate items. It removes any duplicate values automatically.
- Sets don't store items in a particular order

#+begin_src swift
let people = Set(["Denzel Washington", "Tom Cruise", "Nicolas Cage", " Samuel L Jackson"])
#+end_src

- Set uses ~insert()~ to add items.
- The array uses ~append()~ to add items, which means that an item will be added to the end of the array.
- Because sets doesn't store data in an order, the word 'append' doesn't make sense.

** Why are sets different from arrays in Swift?

- Both sets and arrays are collections of data
- Sets are unordered and cannot contain duplicates.
- Arrays retain their order and can contain duplicates.

* How to create and use enums

- Enum(Enumeration) is a set of named values.
- Enums are more efficient and safer.
- When you want to select a weekday, using strings are dangeruous and inefficient.

#+begin_src swift :tangle no
var selected = "Monday"
selected = "Tuesday"
selected = "Wendsday"
#+end_src

- When you use enums, it's safe and efficient.
- You never make a mistake using them.

#+begin_src swift
enum Weekday {
    case monday
    case tuesday
    case wendsday
}
var selected = Weekday.monday
selected = .tuesday
selected = .wendsday
#+end_src
