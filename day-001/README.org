#+title: Day 1
#+author: Allister Isaiah Harvey
#+date: 02-11-2023
#+property: header-args :tangle Day1.swift
#+babel: :session *swift* :cache yes :tangle yes
#+startup: showeverything
#+options: toc:3

* Table of Contents :toc:
- [[#how-to-create-variables-and-contants][How to create variables and contants]]
  - [[#test---variables][Test - Variables]]
  - [[#test---constants][Test - Constants]]
- [[#how-to-create-strings][How to create strings]]
  - [[#test---multi-line-strings][Test - Multi-line strings]]
- [[#how-to-store-whole-numbers][How to store whole numbers]]
  - [[#test---strings-and-integers][Test - Strings and integers]]
- [[#how-to-store-decimal-numbers][How to store decimal numbers]]

* How to create variables and contants

Using the following the code-snippet:

#+begin_src swift
var greeting = "Hello, playground"
#+end_src

The ~var~ keyword is used for creating a new variable and following that is ~greeting~ which is the name of our varibale. Next we have an ~=~ to assign a value to our variable and an initial value on the right side of it. In this particular code-snippet the initial value is of type ~String~ which the ~"~ represents the start and end of the string of text.

#+begin_src swift
var name = "Ted"

// If you wanna change the value, you dont need "var" tag
name = "Rebecca"
name = "Keeley"
#+end_src

The constant keyword which is ~let~ is used almost the same as the ~var~ keyword but it's value cannot be changed after the initialization.

#+begin_src swift
let character = "Daphne"

// You should see an that you cannot assign to a ~let~ constant
character = "Eloise"
character = "Francesca"
#+end_src

Sometimes you would like to debug or print information to the console. For this you can use the ~print~ function. Here's an example:

#+begin_src swift
var playerName = "Roy"
print(playerName) // Roy

playerName = "Dani"
print(playerName) // Dani

playerName = "Sam"
print(playerName) // Sam
#+end_src

The naming style that's a standard convention. The style is called "camel case", because the second and subsequent words in a name start with a little bump for the capital letter:

#+begin_src swift
let managerName = "Michael Scott"
let dogBreed = "Samoyed"
let meaningOfLife = "How many roads must a man walk down?"
#+end_src

** Test - Variables

Question 1: Which of these lines of code create new variables?

- [ ] Option 1:
#+begin_src swift :tangle no
message = "Good morning, Dave!"
#+end_src

This needs to start with ~var~ in order to create a new variable.


- [X] Option 2:
#+begin_src swift :tangle no
var operatingSystem = "macOS"
#+end_src

This creates a variable called ~operatingSystem~.

Question 2: Which of these lines of code create new variables?

- [X] Option 1:
#+begin_src swift :tangle no
var address = "321 Park Lane"
#+end_src

This creates a variable called ~address~.

- [ ] Option 2:
#+begin_src swift :tangle no
favoriteColor = "heliotrope"
#+end_src

This needs to start with ~var~ in order to create a new variable.

Question 3: Which of these lines of code create new variables?

- [X] Option 1:
#+begin_src swift :tangle no
var dinosaur = "T-Rex"
#+end_src

This creates a variable called ~dinosaur~.

- [ ] Option 2:
#+begin_src swift :tangle no
city = "Paris"
#+end_src

This needs to start with ~var~ in order to create a new variable.

Question 4: Which of these lines of code create new variables?

- [X] Option 1:
#+begin_src swift :tangle no
var pirate = "LeChuck"
#+end_src

This creates a variable called ~pirate~.

- [ ] Option 2:
#+begin_src swift :tangle no
spaceship = "Nostromo"
#+end_src

This needs to start with ~var~ in order to create a new variable.

Question 5: Which of these lines of code create new variables?

- [ ] Option 1:
#+begin_src swift :tangle no
status = "success"
#+end_src

This needs to start with ~var~ in order to create a new variable.


- [X] Option 2:
#+begin_src swift :tangle no
var name = "Sophie"
#+end_src

This creates a variable called ~name~.

Question 6: Which of these lines of code create new variables?

- [X] Option 1:
#+begin_src swift :tangle no
var str = "success"
#+end_src

This creates a variable called ~str~.

- [ ] Option 2:
#+begin_src swift :tangle no
user = "Sophie"
#+end_src

This needs to start with ~var~ in order to create a new variable.

** Test - Constants

Question 1: Which of these lines create constants?
- [ ] Option 1:
#+begin_src swift :tangle no
height = 172.1
#+end_src

This modifies an existing variable.

- [X] Option 2:
#+begin_src swift :tangle no
let width = 14.0
#+end_src

This creates a constant called ~width~.

Question 2: Which of these lines create constants?
- [X] Option 1:
#+begin_src swift :tangle no
let username = "twostraws"
#+end_src

This creates a constant called ~username~.

- [ ] Option 2:
#+begin_src swift :tangle no
var status = "success"
#+end_src

This creates a variable.

Question 3: Which of these lines create constants?
- [X] Option 1:
#+begin_src swift :tangle no
let tweeted = false
#+end_src

This creates a constant called ~tweeted~.

- [ ] Option 2:
#+begin_src swift :tangle no
var isRead = true
#+end_src

This creates a variable.

Question 4: Which of these lines create constants?
- [X] Option 1:
#+begin_src swift :tangle no
let password = "fr0sti3s"
#+end_src

This creates a constant called ~password~.

- [ ] Option 2:
#+begin_src swift :tangle no
var season = "summer"
#+end_src

This creates a variable.

Question 5: Which of these lines create constants?
- [ ] Option 1:
#+begin_src swift :tangle no
loggedIn = false
#+end_src

This modifies an existing variable.

- [X] Option 2:
#+begin_src swift :tangle no
let enabled = true
#+end_src

This creates a constant called ~enabled~.

Question 6: Which of these lines create constants?
- [X] Option 1:
#+begin_src swift :tangle no
let age = 26
#+end_src

This creates a constant called ~age~.

- [ ] Option 2:
#+begin_src swift :tangle no
var score = 1000
#+end_src

This creates a variable.


* How to create strings

Swift’s strings start and end with double quotes. Like this:

#+begin_src swift
let actor = "Denzel Washington"
#+end_src

or you can add punctuation, emojis and other characters, like this:

#+begin_src swift
let filename = "paris.jpg"
let result = "⭐️ You win! ⭐️"
#+end_src

You can also add double quotes within a string as long as you remember to have a backslash before them so that Swift understands that they are inside the string.

#+begin_src swift
let quote = "Then he tapped a sign saying \"Believe\" and walked away."
#+end_src

You cannot use line breaks within a Swift string. So this kind of code isn't allowed:

#+begin_src swift :tangle no
let movie = "A day in
the life of an
Apple engineer"
#+end_src

But you can however use triple quotes to create strings across multiple lines, like this:

#+begin_src swift
let movie = """
A day in
the life of an
Apple engineer
"""
#+end_src

You can read the length of the string by adding '.count' after the name of the variable or constant:

#+begin_src swift
print(actor.count) // 17
#+end_src

If you want to, you can extract the string length from ~actor~ and print it indirectly like this:

#+begin_src swift
let nameLength = actor.count
print(nameLength) // 17
#+end_src

Another useful functionality is the ~uppercased~ method which uppercases a string.

#+begin_src swift
print(result.uppercased()) // ⭐️ YOU WIN! ⭐️
#+end_src

The last piece of helpful functionality in this topic is called ~hasPrefix~ and it lets us know if a string starts with some letters of our choosing

#+begin_src swift
print(movie.hasPrefix("A day"))
#+end_src

There's also a ~hasSuffix~ counterpart, which checks whether or not a string ends with some text:

#+begin_src swift
print(filename.hasSuffix(".jpg"))
#+end_src

*Important Note*: Strings are case-sensitive in Swift, which means using ~filename.hasSuffix(".JPG")~ will return false because the letters in the string are lowercase.

** Test - Multi-line strings

Question 1: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var burns = """
The best laid schemes
o' mice an' men
gang aft agley
"""
#+end_src

This creates a valid multi-line string.

Question 2: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var shakespeare = """
To be or not to be
that is the question
"""
#+end_src

This creates a valid multi-line string.

Question 3: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var joseph = """
When I am an old woman,
I shall wear purple
with a red hat that doesn't go,
and doesn't suit me
"""
#+end_src

This creates a valid multi-line string.

Question 4: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var eliot = "This is the way the world ends
Not with a bang but with a whimper"
#+end_src

Multi-line strings must start and end with three double quotes on lines by themselves.

Question 5: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var tennyson = """
Tis better to have loved
and lost than never
 to have loved at all
"""
#+end_src

This creates a valid multi-line string.

Question 6: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var lear = "The Owl and the Pussy-cat went to sea
In a beautiful pea-green boat,
They took some honey, and plenty of money,
Wrapped up in a five-pound note."
#+end_src

Multi-line strings must start and end with three double quotes on lines by themselves.

Question 7: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var wordsworth = """
I wandered lonely as a cloud
that floats on high
o'er vales and hills
"""
#+end_src

This creates a valid multi-line string.

Question 8: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var coleridge = """
Water, water, everywhere
and not a drop to drink"""
#+end_src

The final three quotes must be on a line by themselves.

Question 9: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var henley = """I am the master of my fate
I am the captain of my soul"""
#+end_src

The final three quotes must be on a line by themselves.

Question 10: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var rossetti = """
For if the darkness and corruption leave
A vestige of the thoughts that once I had,
Better by far you should forget and smile
Than that you should remember and be sad.
"""
#+end_src

This creates a valid multi-line string.

Question 11: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var shelley = "My name is Ozymandias, King of Kings
Look on my works, ye mighty, and despair!"
#+end_src

Multi-line strings must start and end with three double quotes on lines by themselves.

Question 12: This code creates multi-line strings correctly – true or false?
#+begin_src swift :tangle no
var brooke = ""If I should die,
think only this of me
There is some corner of a foreign field
That is forever England."
#+end_src

Multi-line strings must start and end with three double quotes on lines by themselves.


* How to store whole numbers

You can work with whole numbers using what is called integers, or ~Int~ for short. “integer” is originally a Latin word meaning “whole.”

 For example, we could create a score constant like this:

 #+begin_src swift
 let score = 10
 #+end_src

Because of how large integers can get it can become quite unreadable when reading larger numbers. So in Swift we can add underscores to make the numbers more readable, like this:

#+begin_src swift
let reallyBig = 100_000_000
#+end_src

We also have the basic arithmetic operations for for adding, subtracting, multiplying and dividing in Swift. Like this:

#+begin_src swift
let lowerScore = score - 2
let higherScore = score + 10
let doubledScore = score * 2
let squaredScore = score * score
let halvedScore = score / 2
print(score)
#+end_src 

Rather than making new constants each time, Swift has some special operations that adjust an integer somehow and assigns the result back to the original number. Like this:

#+begin_src swift
var counter = 10
counter += 5
print(counter) // 15
#+end_src

We call these compound assignment operators, and they come in other forms:

#+begin_src swift
counter *= 2
print(counter)
counter -= 10
print(counter)
counter /= 2
print(counter)
#+end_src

Just like strings, integers also have built-in functionality. For example you can call the ~isMultiple(of:)~ method to find out whether it’s a multiple of another integer. Like this:

#+begin_src swift
print(120.isMultiple(of: 3))
#+end_src

** Test - Strings and integers

Question 1: Which code creates an integer?

- [X] Option 1:
#+begin_src swift :tangle no
var mortgageRemaining = 100_000
#+end_src

This creates an integer called ~mortgageRemaining~.

- [ ] Option 2:
#+begin_src swift :tangle no
var dogBreed = "samoyed"
#+end_src

This creates a string.

Question 2: Which code creates an integer?

- [X] Option 1:
#+begin_src swift :tangle no
var speed = 88
#+end_src

This creates an integer called ~speed~.

- [ ] Option 2:
#+begin_src swift :tangle no
var age = "23"
#+end_src

Even though this has a number inside the quotes, this still creates a string.

Question 3: Which code creates an integer?

- [X] Option 1:
#+begin_src swift :tangle no
var repeatCount = 82
#+end_src

This creates an integer called ~repeatCount~.

- [ ] Option 2:
#+begin_src swift :tangle no
var selectedWood = "mahogany"
#+end_src

This creates a string.

Question 4: Which code creates an integer?

- [X] Option 1:
#+begin_src swift :tangle no
var highScore = 328_556
#+end_src

This creates an integer called ~highScore~.

- [ ] Option 2:
#+begin_src swift :tangle no
var sizeInInches = "27"
#+end_src

Even though this has a number inside the quotes, this still creates a string.

Question 5: Which code creates an integer?

- [ ] Option 1:
#+begin_src swift :tangle no
var currentSong = "Rainbow to the Stars"
#+end_src

This creates a string.

- [X] Option 2:
#+begin_src swift :tangle no
var power = 9001
#+end_src

This creates an integer called ~power~.

Question 6: Which code creates an integer?

- [X] Option 1:
#+begin_src swift :tangle no
var winner = "Miguel"
#+end_src

This creates a string.

- [ ] Option 2:
#+begin_src swift :tangle no
var rating = 5
#+end_src

This creates an integer called ~rating~.


* How to store decimal numbers

Swift considers decimals to be a wholly different type of data to integers, which means you can’t mix them together. Integers are always 100% accurate, whereas decimals are not, so Swift won’t let you put the two of them together unless you specifically ask for it to happen.

#+begin_src swift
let a = 1
let b = 2.0
#+end_src

#+begin_src swift :tangle no
let c = a + b // Will error
#+end_src

If you want that to happen you need to tell Swift explicitly that it should either treat the Double inside b as an Int:

#+begin_src swift
let c = a + Int(b)
#+end_src

#+begin_src swift :tangle no
let c = Double(a) + b
#+end_src

Swift infers the type of a number based on the presence or absence of a decimal point. A number with a decimal point is a ~Double~, while a number without a decimal point is an ~Int~. This applies even if the decimal part is zero.

#+begin_src swift
let double1 = 3.1
let double2 = 3131.3131
let double3 = 3.0
let int1 = 3
#+end_src
