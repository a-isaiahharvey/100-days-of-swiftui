#+title: Day 6
#+subtitle: loops, summary, and checkpoint 3
#+author: Allister Isaiah Harvey
#+date: 14-11-2023
#+property: header-args :tangle Day6.swift
#+babel: :session *swift* :cache yes :tangle yes
#+startup: showeverything
#+options: toc:3

* Table of Contents :toc:
- [[#how-to-use-a-for-loop-to-repeat-work][How to use a for loop to repeat work]]
  - [[#why-does-swift-use-underscore-with-loops][Why does Swift use underscore with loops]]
  - [[#why-does-swift-have-two-range-operators][Why does Swift have two range operators?]]
- [[#how-to-use-a-while-loop-to-repeat-work][How to use a while loop to repeat work]]
  - [[#when-should-you-use-a-while-loop][When should you use a while loop?]]
- [[#how-to-skip-loop-items-with-break-and-continue][How to skip loop items with break and continue]]
  - [[#why-would-you-want-to-exit-a-loop][Why would you want to exit a loop?]]
  - [[#why-does-swift-have-labeled-statements][Why does Swift have labeled statements?]]
  - [[#when-to-use-break-and-continue][When to use break and continue]]

* How to use a for loop to repeat work

- ~for {variable} in {group: collection or range}~ loop
- loop body : The code inside the braces
- loop iteration : One cycle through the loop budy
- loop variable : The group's item which change to a new value in the next loop iteration

#+begin_src swift
let platforms = ["iOS", "macOS", "tvOS", "watchOS"]

for os in platforms {
    print("Swift works great on \(os).")
}
#+end_src

- Nested loop : You can put loops inside loops

#+begin_src swift
// 1 ~ 12 구구단 출력
for i in 1...12 {
    print("The \(i) times table:")
    for j in 1...12 {
        print("  \(j) x \(i) is \(j * i)")
    }
    print()
}
#+end_src

- You can replace the loop variable with underscore(~_~) if you don't use the loop variable.

#+begin_src swift
var lyric = "Haters gonna"

// Variable을 사용하지 않고 단순 loop 반복
for _ in 1...5 {
    lyric += " hate"
}
print(lyric)  // Haters gonna hate hate hate hate hate
#+end_src

** Why does Swift use underscore with loops

- You don't actually need the value, you can use underscore instead of loop variable.
- If you use an underscore, we can look at the code and immediately see the loop variable isn't being used.

** Why does Swift have two range operators?

- ~..<~ : The half-open range which means 'up to but excluding'
- ~...~ : THe closed range which means 'up to and including'

#+begin_src swift
let names = ["Piper", "Alex", "Suzanne", "Gloria"]
print(names[1...3])  // ["Alex", "Suzanne", "Gloria"]
print(names[1..<3])  // ["Alex", "Suzanne"]
print(names[2...])   // ["Suzanne", "Gloria"]
#+end_src

* How to use a while loop to repeat work

- ~while~ loop will continually execute the lop body until the condition is ~false~.
- It's useful when you just don't know how many times the loop will go around.

#+begin_src swift
var countdown = 10

while countdown > 0 {
    print("\(countdown)...")
    countdown -= 1
}
#+end_src

** When should you use a while loop?

- ~for~ loops are generally used with finite sequences.
- ~while~ loops can loop until any arbitrary condition becomes false.
  - the user asks to stop
  - a server tell us to stop
  - we've found the answer we're looking for

* How to skip loop items with break and continue

- ~continue~ skips the current loop iteration

#+begin_src swift
let filenames = ["me.jpg", "work.txt", "sophie.jpg", "logo.psd"]

for filename in filenames {
    if !filename.hasSuffix(".jpg") {
        continue  // It skips iteration for "work.txt" and "logo.psd"
    }
    print("Found picture: \(filename)")  // "me.jpg", "sophie.jpg"
}
#+end_src

- ~break~ skips all remaining iterations

#+begin_src swift
var multiples = [Int]()

for i in 1...100_100 {
    if i.isMultiple(of: 4) && i.isMultiple(of: 14) {
        multiples.append(i)

        if multiples.count == 10 {
            break  // Exit loop when multiples array has 10 items.
        }
    }
}
#+end_src

** Why would you want to exit a loop?

- ~break~ keyword lets us exit a loop immediately
- Sometimes you want to end your loop prematurely

** Why does Swift have labeled statements?

- It allows us to name certain parts of our code

#+begin_src swift
let options = ["up", "down", "left", "right"]

outerLoop: for option1 in options {
    for option2 in options {
        for option3 in options {
            print("In loop")
            let attempt = [option1, option2, option3]

            if attempt == ["up", "up", "right"] {
                print("The combination is \(attempt)")
                break outerLoop  // All loops stops although nested loops still can run
            }
        }
    }
}
#+end_src

** When to use break and continue

- ~continue~
    - It means, "I'm done with the current run of this loop"
    - Swift will skip the rest of the loop 'body', and go to the next item in the loop.
- ~break~
    - It means, "I'm done with this loop altogether, so get out completely"
    - Swift will skip the remainder of the body loop, but also skip any other loop items.
